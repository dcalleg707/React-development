[{"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\index.js":"1","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\reportWebVitals.js":"2","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\App.js":"3","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\MenuComponent.js":"4","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\HomeComponent.js":"10","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\ContactComponent.js":"11","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\leaders.js":"12","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\comments.js":"13","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\promotions.js":"14","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\promotions.js":"17","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\dishes.js":"18","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\comments.js":"19","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\leaders.js":"20"},{"size":643,"mtime":1609693267265,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":542,"mtime":1610909109393,"results":"24","hashOfConfig":"22"},{"size":1386,"mtime":1609716898736,"results":"25","hashOfConfig":"22"},{"size":1490,"mtime":1609712264979,"results":"26","hashOfConfig":"22"},{"size":6989,"mtime":1610996980246,"results":"27","hashOfConfig":"22"},{"size":1895,"mtime":1610909650465,"results":"28","hashOfConfig":"22"},{"size":5543,"mtime":1610683815486,"results":"29","hashOfConfig":"22"},{"size":2633,"mtime":1609703623012,"results":"30","hashOfConfig":"22"},{"size":1106,"mtime":1609713255050,"results":"31","hashOfConfig":"22"},{"size":9985,"mtime":1610994249448,"results":"32","hashOfConfig":"22"},{"size":2382,"mtime":1609712351320,"results":"33","hashOfConfig":"22"},{"size":4280,"mtime":1609712327098,"results":"34","hashOfConfig":"22"},{"size":445,"mtime":1609712340914,"results":"35","hashOfConfig":"22"},{"size":4306,"mtime":1609723136039,"results":"36","hashOfConfig":"22"},{"size":514,"mtime":1611187194333,"results":"37","hashOfConfig":"22"},{"size":192,"mtime":1611187000675,"results":"38","hashOfConfig":"22"},{"size":176,"mtime":1611186876339,"results":"39","hashOfConfig":"22"},{"size":184,"mtime":1611186973365,"results":"40","hashOfConfig":"22"},{"size":180,"mtime":1611187029178,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"c79b56",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\index.js",[],["88","89"],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\App.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\MenuComponent.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\dishes.js",[],["90","91"],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\DishdetailComponent.js",["92","93","94","95"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, BreadcrumbItem, Breadcrumb } from 'reactstrap';\r\nimport { Button, Modal, ModalBody, ModalHeader, FormGroup, Label} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\n\r\nclass CommentForm  extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false,\r\n            dish: props.dish\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n          isModalOpen: !this.state.isModalOpen\r\n        });\r\n      }\r\n    \r\n\r\n    handleSubmit(values){\r\n        if(values.rating == undefined){\r\n            alert(\"You must choose a rating\");\r\n        }\r\n        else{\r\n            this.toggleModal();\r\n            alert('Current State is: ' + JSON.stringify(values));\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                <span className=\"fa fa-lg\"></span> Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                        <ModalHeader>Submit Comment</ModalHeader>\r\n                        <ModalBody>\r\n                            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                                <FormGroup>\r\n                                    <Label htmlFor=\"rating\">Rating</Label>\r\n                                    <Control.select model=\".rating\" name=\"rating\"\r\n                                        innerRef={(input) => this.rating = input} className=\"form-control\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label htmlFor=\"name\">Name</Label>\r\n                                    <Control.text model=\".name\" id='name' name='name'\r\n                                    innerRef={(input) => this.name = input} className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                    }} />\r\n                                    <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".name\" \r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less',\r\n                                    }}></Errors>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label htmlFor=\"comment\">Comment</Label>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                            rows=\"6\" \r\n                                            className=\"form-control\" innerRef={(input) => this.comment = input}\r\n                                            validators={{\r\n                                                required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                            }} />\r\n                                        <Errors \r\n                                        className=\"text-danger\"\r\n                                        model=\".comment\" \r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less',\r\n                                        }}></Errors>\r\n                                </FormGroup>\r\n                                <Button type='submit' value='submit' className=\"bg-primary\">Submit</Button>\r\n                            </LocalForm>\r\n                        </ModalBody>\r\n                    </Modal>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction RenderDish({dish}){\r\n    return(\r\n        <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name}/>\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );  \r\n}\r\n\r\nconst RenderComents = ({comments, onClick}) => {\r\n    const coms = comments.map((comment) => {\r\n        return(\r\n            <div key={comment.id}>\r\n                <p>{comment.comment}</p>\r\n                <p>-- {comment.author}, { new Intl.DateTimeFormat('en-US', {year: 'numeric', month:'short', day:'2-digit'}).format(new Date( Date.parse(comment.date)))}</p>\r\n            </div>)\r\n    });\r\n    return(\r\n        <div className=\"col-12 col-md-5 m-1\">\r\n            <h2>Comments</h2>\r\n            {coms}\r\n            <CommentForm/> \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    const dish = props.dish;\r\n\r\n    if(dish != null){   \r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/menu'>Menu</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem Active>\r\n                            {dish.name}\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{dish.name}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={dish}/>\r\n                    <RenderComents comments={props.comments}/>\r\n                </div>\r\n            </div>  \r\n        );\r\n    }\r\n    else{\r\n        return(<div></div>);\r\n    }\r\n}\r\n\r\n\r\nexport default DishDetail;","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\MainComponent.js",["96"],"import React, { Component } from 'react';\r\nimport Menu from './MenuComponent';\r\nimport Home from './HomeComponent';\r\nimport DishDetail from './DishdetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Contact from './ContactComponent';\r\nimport { Switch, Route, Redirect, withRouter} from 'react-router-dom';\r\nimport About from './AboutComponent';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      dishes: state.dishes,\r\n      comments: state.comments,\r\n      promotions: state.promotions,\r\n      leaders: state.leaders\r\n    }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }  \r\n\r\n  render() {\r\n    const HomePage=() =>{\r\n      return(\r\n        <Home dish={this.props.dishes.filter((dish) => dish.featured)[0]} \r\n        promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\r\n        leader={this.props.leaders.filter((leader) => leader.featured)[0]}/>\r\n      );\r\n    }\r\n\r\n    const DishWithId = ({match}) => {\r\n      return(\r\n        <DishDetail dish={this.props.dishes.filter((dish) => dish.id === parseInt(match.params.dishId, 10))[0]} \r\n        comments={this.props.comments.filter((com) => com.dishId === parseInt(match.params.dishId, 10))}/>\r\n      );\r\n    }\r\n\r\n    return (\r\n    <div >\r\n      <Header/>\r\n      <Switch>\r\n        <Route path=\"/home\" component={HomePage}/>\r\n        <Route path=\"/aboutus\" component={() => <About leaders={this.props.leaders}/>}/>\r\n        <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes}/>}/>\r\n        <Route path=\"/menu/:dishId\" component={DishWithId}/>\r\n        <Route exact path=\"/contactus\" component={Contact}/>\r\n        <Redirect to=\"/home\"/>\r\n      </Switch>\r\n      <Footer/>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Main));\r\n","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\HeaderComponent.js",["97"],"import React, { Component } from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\r\nButton, Modal, ModalBody, ModalHeader, Form, FormGroup, Label, Input} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event){\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Navbar dark expand=\"md\"> \r\n                    <div className=\"container\"> \r\n                        <NavbarToggler onClick={this.toggleNav}/>\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                            <img src=\"assets/images/logo.png\" height=\"30\" width=\"41 alt=Ristorante Con Fusion\"></img>\r\n                        </NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/home\">\r\n                                        <span className=\"fa fa-home fa-lg\"></span> Home\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                        <span className=\"fa fa-info fa-lg\"></span> About us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                        <span className=\"fa fa-list fa lg\"></span> Menu\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                        <span className=\"fa fa-address-card fa lg\"></span> Contact us\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className='ml-auto' navbar>\r\n                                <NavItem>\r\n                                    <Button outline onClick={this.toggleModal}>\r\n                                        <span className=\"fa fa-sign-in fa-lg\"></span> Login\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n                <Jumbotron>\r\n                    <div className=\"Container\">\r\n                        <div cñassName=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>Ristorante Con Fusion</h1>\r\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses! </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type='text' id='username' name='username'\r\n                                 innerRef={(input) => this.username = input}/>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type='password' id='password' name='password'\r\n                                 innerRef={(input) => this.password = input}/>\r\n                            </FormGroup>\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type='checkbox' id='remember' name='remember'\r\n                                     innerRef={(input) => this.remember = input}/>\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type='submit' value='submit' className=\"bg-primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\ContactComponent.js",["98","99","100","101","102","103","104","105"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Contact extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n    \r\n            this.handleSubmit = this.handleSubmit.bind(this);            \r\n        }\r\n    \r\n        handleSubmit(values) {\r\n            console.log('Current State is: ' + JSON.stringify(values));\r\n            alert('Current State is: ' + JSON.stringify(values));\r\n        }\r\n\r\n        render(){\r\n            return(\r\n                <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to='/home'>Home</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem Active>\r\n                        Contact us\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>Contact us</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send us your Feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                    <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                    placeholder=\"First Name\"\r\n                                    className=\"form-control\" \r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                    }} />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".firstname\" \r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}></Errors>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                    placeholder=\"Last Name\"\r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                    }} />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".lastname\" \r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less',\r\n                                }}></Errors>\r\n                            </Col>                        \r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                        <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                    placeholder=\"Tel. number\"\r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                    }} />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".telnum\" \r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 numbers',\r\n                                    maxLength: 'Must be 15 numbers or less',\r\n                                    isNumber: 'Must be a number'\r\n                                }}></Errors>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                    placeholder=\"Email\" \r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        required, validEmail\r\n                                    }} />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".email\" \r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    validEmail: 'Invalid Email'\r\n                                }}></Errors>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 6, offset: 2}}>\r\n                                <div className=\"form-check\">\r\n                                    <Label check>\r\n                                        <Control.checkbox model=\".agree\"\r\n                                            name=\"agree\"\r\n                                            className=\"form-check-input\"/> {' '}\r\n                                        <strong>May we contact you?</strong>\r\n                                    </Label>\r\n                                </div>\r\n                            </Col>\r\n                            <Col md={{size: 3, offset: 1}}>\r\n                                <Control.select model=\".contactType\" name=\"contactType\"\r\n                                    className=\"form-control\">\r\n                                    <option>Tel.</option>\r\n                                    <option>Email</option>\r\n                                </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                    rows=\"12\" \r\n                                    className=\"form-control\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </LocalForm>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\nexport default Contact;","C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\leaders.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\configureStore.js",["106"],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\dishes.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\PERSONAL\\OneDrive\\Documentos\\TYB\\repos\\reactCourse\\confusion\\src\\redux\\leaders.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":32,"column":26,"nodeType":"115","messageId":"116","endLine":32,"endColumn":28},{"ruleId":"117","severity":1,"message":"118","line":54,"column":37,"nodeType":"119","endLine":55,"endColumn":108},{"ruleId":"117","severity":1,"message":"120","line":65,"column":37,"nodeType":"119","endLine":69,"endColumn":42},{"ruleId":"117","severity":1,"message":"121","line":82,"column":37,"nodeType":"119","endLine":87,"endColumn":50},{"ruleId":"122","severity":1,"message":"123","line":23,"column":3,"nodeType":"124","messageId":"125","endLine":25,"endColumn":4},{"ruleId":"126","severity":1,"message":"127","line":44,"column":29,"nodeType":"119","endLine":44,"endColumn":112},{"ruleId":"128","severity":1,"message":"129","line":63,"column":25,"nodeType":"119","endLine":63,"endColumn":67},{"ruleId":"117","severity":1,"message":"120","line":78,"column":33,"nodeType":"119","endLine":83,"endColumn":42},{"ruleId":"117","severity":1,"message":"120","line":98,"column":33,"nodeType":"119","endLine":103,"endColumn":42},{"ruleId":"117","severity":1,"message":"120","line":118,"column":33,"nodeType":"119","endLine":123,"endColumn":42},{"ruleId":"117","severity":1,"message":"120","line":139,"column":33,"nodeType":"119","endLine":144,"endColumn":42},{"ruleId":"117","severity":1,"message":"130","line":159,"column":41,"nodeType":"119","endLine":161,"endColumn":75},{"ruleId":"117","severity":1,"message":"118","line":167,"column":33,"nodeType":"119","endLine":168,"endColumn":62},{"ruleId":"117","severity":1,"message":"121","line":177,"column":33,"nodeType":"119","endLine":179,"endColumn":63},{"ruleId":"131","severity":1,"message":"132","line":6,"column":10,"nodeType":"133","messageId":"134","endLine":6,"endColumn":19},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],["135"],["136"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]